{"ast":null,"code":"const express = require('express');\nconst mongoose = require('mongoose');\nconst bodyParser = require('body-parser');\n\n// Conexión a la base de datos\nmongoose.connect('mongodb://localhost:27017/nombre-de-tu-bd', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n}).then(() => {\n  console.log('Conexión exitosa a la base de datos');\n}).catch(err => {\n  console.error('Error al conectar a la base de datos', err);\n  process.exit();\n});\n\n// Definición del esquema y modelo de datos\nconst ejemploSchema = mongoose.Schema({\n  nombre: String,\n  edad: Number\n});\nconst Ejemplo = mongoose.model('Ejemplo', ejemploSchema);\n\n// Configuración del servidor\nconst app = express();\napp.use(bodyParser.json());\n\n// Rutas del CRUD\napp.get('/ejemplos', async (req, res) => {\n  try {\n    const ejemplos = await Ejemplo.find();\n    res.json(ejemplos);\n  } catch (err) {\n    res.status(500).json({\n      error: err.message\n    });\n  }\n});\napp.get('/ejemplos/:id', async (req, res) => {\n  try {\n    const ejemplo = await Ejemplo.findById(req.params.id);\n    res.json(ejemplo);\n  } catch (err) {\n    res.status(500).json({\n      error: err.message\n    });\n  }\n});\napp.post('/ejemplos', async (req, res) => {\n  try {\n    const ejemplo = new Ejemplo(req.body);\n    const nuevoEjemplo = await ejemplo.save();\n    res.json(nuevoEjemplo);\n  } catch (err) {\n    res.status(500).json({\n      error: err.message\n    });\n  }\n});\napp.put('/ejemplos/:id', async (req, res) => {\n  try {\n    const ejemplo = await Ejemplo.findByIdAndUpdate(req.params.id, req.body, {\n      new: true\n    });\n    res.json(ejemplo);\n  } catch (err) {\n    res.status(500).json({\n      error: err.message\n    });\n  }\n});\napp.delete('/ejemplos/:id', async (req, res) => {\n  try {\n    const ejemplo = await Ejemplo.findByIdAndDelete(req.params.id);\n    res.json(ejemplo);\n  } catch (err) {\n    res.status(500).json({\n      error: err.message\n    });\n  }\n});\n\n// Iniciar el servidor\napp.listen(3000, () => {\n  console.log('Servidor iniciado en el puerto 3000');\n});","map":{"version":3,"names":["express","require","mongoose","bodyParser","connect","useNewUrlParser","useUnifiedTopology","then","console","log","catch","err","error","process","exit","ejemploSchema","Schema","nombre","String","edad","Number","Ejemplo","model","app","use","json","get","req","res","ejemplos","find","status","message","ejemplo","findById","params","id","post","body","nuevoEjemplo","save","put","findByIdAndUpdate","new","delete","findByIdAndDelete","listen"],"sources":["C:/Users/Alex/Documents/VSCode/anal/g06/inf236-2023-1-par201-grupo-06/client/src/components/nose.js"],"sourcesContent":["const express = require('express');\r\nconst mongoose = require('mongoose');\r\nconst bodyParser = require('body-parser');\r\n\r\n// Conexión a la base de datos\r\nmongoose.connect('mongodb://localhost:27017/nombre-de-tu-bd', {\r\n  useNewUrlParser: true,\r\n  useUnifiedTopology: true\r\n}).then(() => {\r\n  console.log('Conexión exitosa a la base de datos');\r\n}).catch(err => {\r\n  console.error('Error al conectar a la base de datos', err);\r\n  process.exit();\r\n});\r\n\r\n// Definición del esquema y modelo de datos\r\nconst ejemploSchema = mongoose.Schema({\r\n  nombre: String,\r\n  edad: Number\r\n});\r\n\r\nconst Ejemplo = mongoose.model('Ejemplo', ejemploSchema);\r\n\r\n// Configuración del servidor\r\nconst app = express();\r\napp.use(bodyParser.json());\r\n\r\n// Rutas del CRUD\r\napp.get('/ejemplos', async (req, res) => {\r\n  try {\r\n    const ejemplos = await Ejemplo.find();\r\n    res.json(ejemplos);\r\n  } catch (err) {\r\n    res.status(500).json({ error: err.message });\r\n  }\r\n});\r\n\r\napp.get('/ejemplos/:id', async (req, res) => {\r\n  try {\r\n    const ejemplo = await Ejemplo.findById(req.params.id);\r\n    res.json(ejemplo);\r\n  } catch (err) {\r\n    res.status(500).json({ error: err.message });\r\n  }\r\n});\r\n\r\napp.post('/ejemplos', async (req, res) => {\r\n  try {\r\n    const ejemplo = new Ejemplo(req.body);\r\n    const nuevoEjemplo = await ejemplo.save();\r\n    res.json(nuevoEjemplo);\r\n  } catch (err) {\r\n    res.status(500).json({ error: err.message });\r\n  }\r\n});\r\n\r\napp.put('/ejemplos/:id', async (req, res) => {\r\n  try {\r\n    const ejemplo = await Ejemplo.findByIdAndUpdate(req.params.id, req.body, { new: true });\r\n    res.json(ejemplo);\r\n  } catch (err) {\r\n    res.status(500).json({ error: err.message });\r\n  }\r\n});\r\n\r\napp.delete('/ejemplos/:id', async (req, res) => {\r\n  try {\r\n    const ejemplo = await Ejemplo.findByIdAndDelete(req.params.id);\r\n    res.json(ejemplo);\r\n  } catch (err) {\r\n    res.status(500).json({ error: err.message });\r\n  }\r\n});\r\n\r\n// Iniciar el servidor\r\napp.listen(3000, () => {\r\n  console.log('Servidor iniciado en el puerto 3000');\r\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}