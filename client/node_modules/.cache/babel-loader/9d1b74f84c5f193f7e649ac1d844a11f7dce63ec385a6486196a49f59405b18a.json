{"ast":null,"code":"const express = require('express');\nconst mongoose = require('mongoose');\nconst bodyParser = require('body-parser');\n\n// Conexión a la base de datos\n\n// Definición del esquema y modelo de datos\nconst ejemploSchema = mongoose.Schema({\n  nombre: String,\n  edad: Number\n});\nconst Ejemplo = mongoose.model('Ejemplo', ejemploSchema);\n\n// Configuración del servidor\nconst app = express();\napp.use(bodyParser.json());\n\n// Rutas del CRUD\napp.get('/ejemplos', async (req, res) => {\n  try {\n    const ejemplos = await Ejemplo.find();\n    res.json(ejemplos);\n  } catch (err) {\n    res.status(500).json({\n      error: err.message\n    });\n  }\n});\napp.get('/ejemplos/:id', async (req, res) => {\n  try {\n    const ejemplo = await Ejemplo.findById(req.params.id);\n    res.json(ejemplo);\n  } catch (err) {\n    res.status(500).json({\n      error: err.message\n    });\n  }\n});\napp.post('/ejemplos', async (req, res) => {\n  try {\n    const ejemplo = new Ejemplo(req.body);\n    const nuevoEjemplo = await ejemplo.save();\n    res.json(nuevoEjemplo);\n  } catch (err) {\n    res.status(500).json({\n      error: err.message\n    });\n  }\n});\napp.put('/ejemplos/:id', async (req, res) => {\n  try {\n    const ejemplo = await Ejemplo.findByIdAndUpdate(req.params.id, req.body, {\n      new: true\n    });\n    res.json(ejemplo);\n  } catch (err) {\n    res.status(500).json({\n      error: err.message\n    });\n  }\n});\napp.delete('/ejemplos/:id', async (req, res) => {\n  try {\n    const ejemplo = await Ejemplo.findByIdAndDelete(req.params.id);\n    res.json(ejemplo);\n  } catch (err) {\n    res.status(500).json({\n      error: err.message\n    });\n  }\n});\n\n// Iniciar el servidor\napp.listen(3000, () => {\n  console.log('Servidor iniciado en el puerto 3000');\n});","map":{"version":3,"names":["express","require","mongoose","bodyParser","ejemploSchema","Schema","nombre","String","edad","Number","Ejemplo","model","app","use","json","get","req","res","ejemplos","find","err","status","error","message","ejemplo","findById","params","id","post","body","nuevoEjemplo","save","put","findByIdAndUpdate","new","delete","findByIdAndDelete","listen","console","log"],"sources":["C:/Users/Alex/Documents/VSCode/anal/g06/inf236-2023-1-par201-grupo-06/client/src/components/nose.js"],"sourcesContent":["const express = require('express');\r\nconst mongoose = require('mongoose');\r\nconst bodyParser = require('body-parser');\r\n\r\n// Conexión a la base de datos\r\n\r\n\r\n// Definición del esquema y modelo de datos\r\nconst ejemploSchema = mongoose.Schema({\r\n  nombre: String,\r\n  edad: Number\r\n});\r\n\r\nconst Ejemplo = mongoose.model('Ejemplo', ejemploSchema);\r\n\r\n// Configuración del servidor\r\nconst app = express();\r\napp.use(bodyParser.json());\r\n\r\n// Rutas del CRUD\r\napp.get('/ejemplos', async (req, res) => {\r\n  try {\r\n    const ejemplos = await Ejemplo.find();\r\n    res.json(ejemplos);\r\n  } catch (err) {\r\n    res.status(500).json({ error: err.message });\r\n  }\r\n});\r\n\r\napp.get('/ejemplos/:id', async (req, res) => {\r\n  try {\r\n    const ejemplo = await Ejemplo.findById(req.params.id);\r\n    res.json(ejemplo);\r\n  } catch (err) {\r\n    res.status(500).json({ error: err.message });\r\n  }\r\n});\r\n\r\napp.post('/ejemplos', async (req, res) => {\r\n  try {\r\n    const ejemplo = new Ejemplo(req.body);\r\n    const nuevoEjemplo = await ejemplo.save();\r\n    res.json(nuevoEjemplo);\r\n  } catch (err) {\r\n    res.status(500).json({ error: err.message });\r\n  }\r\n});\r\n\r\napp.put('/ejemplos/:id', async (req, res) => {\r\n  try {\r\n    const ejemplo = await Ejemplo.findByIdAndUpdate(req.params.id, req.body, { new: true });\r\n    res.json(ejemplo);\r\n  } catch (err) {\r\n    res.status(500).json({ error: err.message });\r\n  }\r\n});\r\n\r\napp.delete('/ejemplos/:id', async (req, res) => {\r\n  try {\r\n    const ejemplo = await Ejemplo.findByIdAndDelete(req.params.id);\r\n    res.json(ejemplo);\r\n  } catch (err) {\r\n    res.status(500).json({ error: err.message });\r\n  }\r\n});\r\n\r\n// Iniciar el servidor\r\napp.listen(3000, () => {\r\n  console.log('Servidor iniciado en el puerto 3000');\r\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}